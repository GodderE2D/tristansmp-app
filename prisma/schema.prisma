generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  linkChallenge String? @unique
  minecraftUUID String? @unique

  accounts      Account[]
  sessions      Session[]
  itemsOnMarket AuctionedItem[]
  isBotAdmin    Boolean         @default(false)
  application   Application?
}

enum ApplicationStatus {
  PendingReview
  Approved
  Denied
}

model Application {
  id String @id @default(cuid())

  data     Json
  status   ApplicationStatus @default(PendingReview)
  reviewer String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// AuctionedItem status
enum AuctionStatus {
  ACTIVE
  SOLD
  WITHDRAWN
  PENDING
}

// Individual items that are up for auction on a specfic item type
model AuctionedItem {
  id     String        @id @default(cuid())
  price  Int
  status AuctionStatus @default(PENDING)

  seller   User   @relation(fields: [sellerId], references: [id])
  sellerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type    ItemType? @relation(fields: [typeb64], references: [base64])
  typeb64 String?
}

// The item type that is being auctioned
// There can be multiple auctioned items of the same type from different or the same sellers
model ItemType {
  base64 String @id
  slug   String @unique
  name   String

  stock AuctionedItem[] // Items that are currently up for auction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
